# TODO: size, compile time, and speed benchmarks to test things like inlining, no inlining, macros instead of fns, etc.

[package]
name = "snailx"
version = "0.7.1"
authors = ["echohumm <echo0humm@gmail.com>"]
edition = "2015"
rust-version = "1.48.0"
description = "Zero-allocation, low-overhead access to program arguments (argv) with iterators over `&'static CStr`, `&'static str`, and `&'static OsStr`. Works in no_std (optional std feature) and targets Unix and macOS."
license = "GPL-3.0 OR MIT"
repository = "https://github.com/echohumm/snail"
keywords = ["argv", "arguments", "cli", "no_std", "zero-allocation"]
categories = ["command-line-interface", "no-std::no-alloc", "os::unix-apis"]
readme = "README.md"
build = "build.rs"
exclude = ["/src/main.rs", "/extra/", "generated/"]

[package.metadata.docs.rs]
features = ["std", "to_core_cstr"]

[features]
# dev features, irrelevant to users
## causes tests to cause ub with a theoretically impossible case
__test_cause_ub = []

## enables main.rs to be built below 1.66.0
__testing_bl_166 = []

## benchmarking with std
### with str checks
__full_pure_bench = ["__pure_bench", "std"]
### with str checks but infallible mapping optimizations
__full_pure_opt_bench = ["__pure_opt_bench", "std"]
### without str checks
__full_opt_bench = ["__opt_bench", "std"]
### worst case scenario
__full_worst_bench = ["__worst_bench", "std"]

## benchmarking without std
### with str checks
__pure_bench = ["__bench", "no_cold"]
### with str checks but infallible mapping optimizations
__pure_opt_bench = ["__pure_bench", "infallible_map"]
### without str checks
__opt_bench = ["__pure_bench", "infallible_map", "assume_valid_str"]
### worst case scenario
__worst_bench = ["__bench"]

## for access to helpers to benchmark them
__bench = []

default = []

# actual features
## enables osstr functions and snailx::CStr::to_stdlib
std = []
## removes #[cold] attrs on functions (primarily used for benchmarking, but users may use as well)
no_cold = []
## removes utf-8 validity checks when converting &[u8]s to &strs.
## should usually not be used if using args_str, unless you trust your users not to enter dumb stuff
assume_valid_str = []
## switches snailx::CStr::to_stdlib from returning std::ffi::CStr to returning core::ffi::CStr.
## requires rust ver >= 1.64
to_core_cstr = []
## enables infallible maps in MappedArgs with a boolean flag
infallible_map = []
## enables a DoubleEndedIterator implementation for iterators.
rev_iter = []
## allows the use of the rust alloc crate
alloc = []
non_indexing_parser = []
indexing_parser = ["alloc", "std"]

full = ["std", "infallible_map", "rev_iter"]

# TODO: split below targets into multiple files

# commented out until usage because it's a higher msrv than the crate

#[[bench]]
#name = "bench_gen"
#path = "extra/bench.rs"
#harness = false
#required-features = ["__bench"]
#
#[dev-dependencies]
#criterion = "0.7.0"

[[test]]
name = "tests_gen"
path = "extra/tests.rs"
required-features = ["__bench", "std"]
